{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.4.0"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30749,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# R-ExtraImp-Forecast-TramoSeats\n\nIt is the R script used to create the submission for Statistics Awards Round 3 for International Trade, Import of Goods for countries outside Europe, using the classic TRAMO/SEATS without exogenous variable. The original script was running at Kaggle. Since all data are automatically fetched from Eurostat by its API and preprocessed, this notebook should be able to run at any IDE.  ","metadata":{}},{"cell_type":"code","source":"# This R environment comes with many helpful analytics packages installed\n# It is defined by the kaggle/rstats Docker image: https://github.com/kaggle/docker-rstats\n# For example, here's a helpful package to load\n\nlibrary(tidyverse) # metapackage of all tidyverse packages\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#list.files(path = \"../input\")\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"install.packages(install.packages(\"quantmod\"))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"library(quantmod)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"library(TSstudio)\nlibrary(dplyr)\nlibrary(tibbletime)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Forecasting month\n\nAn example for forecasting for March 2025. The forecasting of other months has been conducted analogously. ","metadata":{}},{"cell_type":"code","source":"fcst_year <- 2025\nfcst_mon <- 3","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"starttime <- Sys.time()\nprint(starttime)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"install.packages(\"RJDemetra\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"library(\"RJDemetra\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"install.packages(\"eurostat\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"library(\"eurostat\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"toc_df = get_eurostat_toc()\n#toc_df","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"code1 = \"EI_ETEU27_2020_M\"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## OBS: Extra-EU Import.\n\nstk_flow = \"IMP\", partner = \"EXT_EU27_2020\"","metadata":{}},{"cell_type":"code","source":"my_pars <- list(freq=\"M\",stk_flow = \"IMP\",partner = \"EXT_EU27_2020\",indic = \"ET-T\", unit = \"MIO-EUR-NSA\",sinceTimePeriod= 2010)\nmy_pars","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"indata = get_eurostat(code1, filters = my_pars)\nindata","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"Land= c(\"AT\",\"BE\",\"BG\",\"CY\",\"CZ\",\"DE\",\"DK\",\"EE\",\"EL\",\"ES\",\"FI\",\"FR\",\"HR\",\"HU\",\"IE\",\"IT\",\"LT\",\"LU\",\"LV\",\"MT\",\"NL\",\"PL\",\"PT\",\"RO\",\"SE\",\"SI\",\"SK\")\nprint(length(Land))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Filter the data frame\nindata1 <- indata %>%\n  filter(geo %in% Land) %>%\n    arrange(geo)\n\n# Print the filtered data\nprint(indata1)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"library(tidyr)\nindata2 <- indata1[,c(\"geo\",\"time\",\"values\")] %>% \npivot_wider(names_from = geo, values_from = values)\nprint(indata2)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Forecasting by RJDemetra","metadata":{}},{"cell_type":"code","source":"indata2_backup <- indata2","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#### In order to simulate the real scenario for the competition, truncate the data to two months before the forecasting time period. (Otherwise, the data for the forecasting month might already be available from Eurostat). For the real competition, we can use all available data for European countries.","metadata":{}},{"cell_type":"code","source":"indata2 <- indata2[indata2$time <='2025-01-01',]\ntail(indata2)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"write.csv(indata2,\"ExtraImp_EU27_201001_202501.csv\",row.names = FALSE)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Approach 1. Tramo/seats without exogenous variables\n\nDifferent series can have different models","metadata":{}},{"cell_type":"code","source":"starttime1 <- Sys.time()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T19:53:28.059654Z","iopub.execute_input":"2025-04-17T19:53:28.061253Z","iopub.status.idle":"2025-04-17T19:53:28.074269Z","shell.execute_reply":"2025-04-17T19:53:28.072381Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"start_year <- as.numeric(format(min(indata2$time), \"%Y\"))\nstart_month <- as.numeric(format(min(indata2$time), \"%m\"))\n\nfcst_tramo1 <- data.frame(land = character(), mon = Date(), forecast = numeric(), stringsAsFactors = FALSE)\n \nindata3 <- indata2 %>%\n    select(-\"time\")\n\nfor (column_name in colnames(indata3)) {\n    print(column_name)\n    test_data <- indata2[,c(\"time\",column_name)]\n    last_no_na_index <- max(which(!is.na(test_data[[column_name]])))\n    test_data2 <- test_data[1:last_no_na_index,]\n    last_year <- as.numeric(format(max(test_data$time), \"%Y\"))\n    last_month <- as.numeric(format(max(test_data$time), \"%m\"))\n        \n    ts_data <- ts(test_data2[[column_name]], start = c(start_year, start_month), frequency = 12)\n    sa_result <- tramoseats(ts_data, spec = \"RSAfull\")\n\n    fcst <- round(as.numeric(window(sa_result[[\"final\"]]$forecasts, start = c(fcst_year, fcst_mon), end= c(fcst_year, fcst_mon))[,\"y_f\"]), digits=1)\n    forecast_month <- sprintf(\"%02d\", fcst_mon)\n    fcst_tramo1 <- rbind(fcst_tramo1,data.frame(land = column_name, mon = as.Date(paste0(fcst_year,forecast_month,\"01\"), format=\"%Y%m%d\"), forecast = fcst, stringsAsFactors = FALSE))\n}\n\n","metadata":{"execution":{"iopub.status.busy":"2025-04-17T19:57:27.049118Z","iopub.execute_input":"2025-04-17T19:57:27.050858Z","iopub.status.idle":"2025-04-17T19:57:37.002902Z","shell.execute_reply":"2025-04-17T19:57:37.000936Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Print the results\nprint(fcst_tramo1)","metadata":{"execution":{"iopub.status.busy":"2025-04-17T19:58:21.442389Z","iopub.execute_input":"2025-04-17T19:58:21.444695Z","iopub.status.idle":"2025-04-17T19:58:21.464472Z","shell.execute_reply":"2025-04-17T19:58:21.462486Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"endtime1 <- Sys.time()\nprint(paste0(\"Tramo/Seats without X: \", endtime1-starttime1, \" seconds.\"))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-17T19:58:25.294985Z","iopub.execute_input":"2025-04-17T19:58:25.298893Z","iopub.status.idle":"2025-04-17T19:58:25.319933Z","shell.execute_reply":"2025-04-17T19:58:25.317546Z"}},"outputs":[],"execution_count":null}]}